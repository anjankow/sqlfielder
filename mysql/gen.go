//go:build ignore

package main

// Based on https://cs.opensource.google/go/go/+/master:src/image/color/palette/gen.go
// This program generates fields for SQL queries from scanners. Invoke it as
//	go run gen.go -output sql_fields.go

import (
	"bytes"
	"context"
	"errors"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
	"strings"

	"golang.org/x/tools/go/packages"
)

var outputFilename = flag.String("output", "sql_fields.go", "output file name")

func main() {
	log.SetFlags(0)
	log.SetPrefix("sql-fields-gen: ")

	flag.Parse()

	var buf bytes.Buffer

	fmt.Fprintf(&buf, "// Code generated by go run gen.go -output %s; DO NOT EDIT.\n", *outputFilename)
	fmt.Fprintln(&buf)
	fmt.Fprintln(&buf, "package mysql")
	fmt.Fprintln(&buf)
	// fmt.Fprintln(&buf, `import "image/color"`)
	// fmt.Fprintln(&buf)

	ctx := context.Background()
	pkg, err := loadPackage(ctx, ".")
	if err != nil {
		log.Fatal("failed to load the package: ", err)
	}

	parsed, err := parsePackage(ctx, pkg)
	if err != nil {
		log.Fatal("failed to parse the package: ", err)
	}

	if err := generate(&buf, parsed); err != nil {
		log.Fatal("failed to generate: ", err)
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	err = os.WriteFile(*outputFilename, data, 0644)
	if err != nil {
		log.Fatal(err)
	}
}

type ParseOutput struct {
}

func loadPackage(ctx context.Context, dir string) (pkg *packages.Package, err error) {
	parseMode := packages.NeedName | packages.NeedFiles | packages.NeedTypes | packages.NeedTypesInfo | packages.LoadAllSyntax
	cfg := packages.Config{
		Context: ctx,
		Mode:    parseMode,
		Dir:     dir,
		ParseFile: func(fset *token.FileSet, filename string, data []byte) (*ast.File, error) {
			switch {
			case filename == *outputFilename,
				strings.HasSuffix(filename, "_with_trace.go"),
				strings.HasSuffix(filename, "_test.go"):
				return parser.ParseFile(fset, filename, data, parser.PackageClauseOnly)
			default:
				return parser.ParseFile(fset, filename, data, parser.SkipObjectResolution|parser.AllErrors)
			}

		},
	}
	pkgs, err := packages.Load(&cfg)
	if err != nil {
		return
	}

	for _, p := range pkgs {
		if p.Name == "mysql" {
			return p, nil
		}
	}

	return nil, errors.New("package mysql not found")
}

func parsePackage(ctx context.Context, pkg *packages.Package) (out *ParseOutput, err error) {
	for i, file := range pkg.Syntax {
		log.Default().Println(pkg.CompiledGoFiles[i], ":", "decl len (", len(file.Decls), ")")

		for _, decl := range file.Decls {
			if fn, ok := decl.(*ast.FuncDecl); ok {
				// Handle function declaration
				if strings.HasPrefix(fn.Name.Name, "scan") {
					log.Default().Println(fn.Name.Name)
				}
			}
		}

	}

	return
}

func generate(buf *bytes.Buffer, parsed *ParseOutput) error {
	return nil
}
