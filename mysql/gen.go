//go:build ignore

package main

// Based on https://cs.opensource.google/go/go/+/master:src/image/color/palette/gen.go
// This program generates fields for SQL queries from scanners. Invoke it as
//	go run gen.go -output sql_fields.go

import (
	"bytes"
	"context"
	"errors"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
	"strings"

	"golang.org/x/tools/go/packages"
)

var outputFilename = flag.String("output", "sql_fields.go", "output file name")

func main() {
	log.SetFlags(0)
	log.SetPrefix("sql-fields-gen: ")

	flag.Parse()

	var buf bytes.Buffer

	fmt.Fprintf(&buf, "// Code generated by go run gen.go -output %s; DO NOT EDIT.\n", *outputFilename)
	fmt.Fprintln(&buf)
	fmt.Fprintln(&buf, "package mysql")
	fmt.Fprintln(&buf)
	// fmt.Fprintln(&buf, `import "image/color"`)
	// fmt.Fprintln(&buf)

	ctx := context.Background()
	pkg, err := loadPackage(ctx, ".")
	if err != nil {
		log.Fatal("failed to load the package: ", err)
	}

	parsed, err := parsePackage(ctx, pkg)
	if err != nil {
		log.Fatal("failed to parse the package: ", err)
	}

	if err := generate(&buf, parsed); err != nil {
		log.Fatal("failed to generate: ", err)
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	err = os.WriteFile(*outputFilename, data, 0644)
	if err != nil {
		log.Fatal(err)
	}
}

type ParseOutput struct {
	scanFuncs []*ast.FuncDecl
}

func loadPackage(ctx context.Context, dir string) (pkg *packages.Package, err error) {
	parseMode := packages.NeedName | packages.NeedFiles | packages.NeedTypes | packages.NeedTypesInfo | packages.LoadAllSyntax
	cfg := packages.Config{
		Context: ctx,
		Mode:    parseMode,
		Dir:     dir,
		ParseFile: func(fset *token.FileSet, filename string, data []byte) (*ast.File, error) {
			switch {
			case filename == *outputFilename,
				strings.HasSuffix(filename, "_with_trace.go"),
				strings.HasSuffix(filename, "_test.go"):
				return parser.ParseFile(fset, filename, data, parser.PackageClauseOnly)
			default:
				return parser.ParseFile(fset, filename, data, parser.ParseComments|parser.SkipObjectResolution|parser.AllErrors)
			}

		},
	}
	pkgs, err := packages.Load(&cfg)
	if err != nil {
		return
	}

	for _, p := range pkgs {
		if p.Name == "mysql" {
			return p, nil
		}
	}

	return nil, errors.New("package mysql not found")
}

func parsePackage(ctx context.Context, pkg *packages.Package) (*ParseOutput, error) {

	parseAssignmentStatement := func(stmt *ast.AssignStmt, cmap ast.CommentMap) bool {
		for _, rhs := range stmt.Rhs {
			callExpr, ok := rhs.(*ast.CallExpr)
			if !ok {
				continue
			}
			selectorExprScan, ok := callExpr.Fun.(*ast.SelectorExpr)
			if !ok {
				continue
			}
			if selectorExprScan.Sel.Name != "Scan" {
				continue
			}

			// Found Scan method call!
			fmt.Println("ARGS")
			for _, arg := range callExpr.Args {
				cgroup := cmap.Filter(arg)
				if len(cgroup) != 0 {
					fmt.Printf("Comment: %v", cgroup.String())
				}
				unaryExpl, ok := arg.(*ast.UnaryExpr)
				if !ok {
					fmt.Printf("DIFFERENT TYPE: %T %v\n", arg, arg)
				}
				fmt.Println(unaryExpl.X)
				fmt.Println(unaryExpl.Op)
				fmt.Println(unaryExpl.OpPos)
			}

		}
		return true
	}

	for i, file := range pkg.Syntax {
		_ = i
		if len(file.Decls) == 0 {
			// No need to load a comment map
			continue
		}

		cmap := ast.NewCommentMap(pkg.Fset, file, file.Comments)

		for _, decl := range file.Decls {
			if fn, ok := decl.(*ast.FuncDecl); ok {
				// Find `func scan...` functions declared in the processed file
				if strings.HasPrefix(fn.Name.Name, "scan") {
					fmt.Println("----------- FUNCTION NAME ", fn.Name.Name)
					// Found it! Now do through each statement inside the function body.
					// Look for for lines like `err := s.Scan(`
					// so an assignment, which right hand side is a call expression to `Scan`.
					for _, stmt := range fn.Body.List {
						switch stmt := stmt.(type) {
						case *ast.ForStmt:
							for _, stmt := range stmt.Body.List {
								assignment, ok := stmt.(*ast.AssignStmt)
								if !ok {
									continue
								}
								parseAssignmentStatement(assignment, cmap)
							}
						case *ast.AssignStmt:
							parseAssignmentStatement(stmt, cmap)
						}
					}
				}
			}
		}
	}

	return &ParseOutput{
		scanFuncs: nil,
	}, nil
}

func generate(buf *bytes.Buffer, parsed *ParseOutput) error {
	return nil
}
