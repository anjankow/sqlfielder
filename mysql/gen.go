//go:build ignore

package main

// Based on https://cs.opensource.google/go/go/+/master:src/image/color/palette/gen.go
// This program generates fields for SQL queries from scanners. Invoke it as
//	go run gen.go -output sql_fields.go

import (
	"bytes"
	"context"
	"errors"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
	"slices"
	"strings"

	"golang.org/x/tools/go/packages"
)

var outputFilename = flag.String("output", "sql_fields.go", "output file name")

const (
	skipComment   = "sqlfieldgen:skip"
	prefixComment = "sqlfieldgen:prefix="
)

func main() {
	log.SetFlags(0)
	log.SetPrefix("sql-fields-gen: ")

	flag.Parse()

	var buf bytes.Buffer

	fmt.Fprintf(&buf, "// Code generated by go run gen.go -output %s; DO NOT EDIT.\n", *outputFilename)
	fmt.Fprintln(&buf)
	fmt.Fprintln(&buf, "package mysql")
	fmt.Fprintln(&buf)
	// fmt.Fprintln(&buf, `import "image/color"`)
	// fmt.Fprintln(&buf)

	ctx := context.Background()
	pkg, err := loadPackage(ctx, ".")
	if err != nil {
		log.Fatal("failed to load the package: ", err)
	}

	parsed, err := parsePackage(ctx, pkg)
	if err != nil {
		log.Fatal("failed to parse the package: ", err)
	}

	if err := generate(&buf, parsed); err != nil {
		log.Fatal("failed to generate: ", err)
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	err = os.WriteFile(*outputFilename, data, 0644)
	if err != nil {
		log.Fatal(err)
	}
}

func loadPackage(ctx context.Context, dir string) (pkg *packages.Package, err error) {
	parseMode := packages.NeedName | packages.NeedFiles | packages.NeedTypes | packages.NeedTypesInfo | packages.LoadAllSyntax
	cfg := packages.Config{
		Context: ctx,
		Mode:    parseMode,
		Dir:     dir,
		ParseFile: func(fset *token.FileSet, filename string, data []byte) (*ast.File, error) {
			switch {
			case filename == *outputFilename,
				strings.HasSuffix(filename, "_with_trace.go"),
				strings.HasSuffix(filename, "_test.go"):
				return parser.ParseFile(fset, filename, data, parser.PackageClauseOnly)
			default:
				return parser.ParseFile(fset, filename, data, parser.ParseComments|parser.SkipObjectResolution|parser.AllErrors)
			}

		},
	}
	pkgs, err := packages.Load(&cfg)
	if err != nil {
		return
	}

	for _, p := range pkgs {
		if p.Name == "mysql" {
			return p, nil
		}
	}

	return nil, errors.New("package mysql not found")
}

func parsePackage(ctx context.Context, pkg *packages.Package) ([]ParsedScanFunc, error) {
	parsedScans := make([]ParsedScanFunc, 0)
	for i, file := range pkg.Syntax {
		_ = i
		if len(file.Decls) == 0 {
			// No need to load a comment map
			continue
		}

		cmap := ast.NewCommentMap(pkg.Fset, file, file.Comments)

		for _, decl := range file.Decls {
			if fn, ok := decl.(*ast.FuncDecl); ok {
				// Find `func scan...` functions declared in the processed file
				if strings.HasPrefix(fn.Name.Name, "scan") {

					// Found it! Now do through each statement inside the function body.
					// Look for for lines like `err := s.Scan(`
					// so an assignment, which right hand side is a call expression to `Scan`.
					for _, stmt := range fn.Body.List {
						switch stmt := stmt.(type) {
						case *ast.ForStmt:
							for _, stmt := range stmt.Body.List {
								assignment, ok := stmt.(*ast.AssignStmt)
								if !ok {
									continue
								}
								scanFunctionCall, err := parseAssignmentStatement(assignment, fn, cmap)
								if err != nil {
									return nil, err
								}
								if scanFunctionCall != nil {
									parsedScans = append(parsedScans, *scanFunctionCall)
								}
							}
						case *ast.AssignStmt:
							scanFunctionCall, err := parseAssignmentStatement(stmt, fn, cmap)
							if err != nil {
								return nil, err
							}
							if scanFunctionCall != nil {
								parsedScans = append(parsedScans, *scanFunctionCall)
							}
						}
					}
				}
			}
		}
	}

	return parsedScans, nil
}

type ScanArg struct {
	Name string
	// Path represents all that stands before the field name,
	// e.g. in object.Field.ScanDst, the path is object.Field
	Path string
	Expr ast.Expr
}

type ParsedScanFunc struct {
	FuncName string
	Args     []ScanArg
	Prefixes map[string]string
}

func parseAssignmentStatement(stmt *ast.AssignStmt, fn *ast.FuncDecl, cmap ast.CommentMap) (*ParsedScanFunc, error) {

	prefixes := make(map[string]string)
	args := make([]ScanArg, 0)

	for _, rhs := range stmt.Rhs {
		callExpr, ok := rhs.(*ast.CallExpr)
		if !ok {
			continue
		}
		selectorExprScan, ok := callExpr.Fun.(*ast.SelectorExpr)
		if !ok {
			continue
		}
		if selectorExprScan.Sel.Name != "Scan" {
			continue
		}

		// Found Scan method call!
		for _, arg := range callExpr.Args {

			unaryExpl, ok := arg.(*ast.UnaryExpr)
			if !ok {
				return nil, fmt.Errorf("%s: unexpected argument type: %T %v", fn.Name.Name, arg, arg)
			}

			// Check the comments to see if the rest of the fields should be skipped
			comment := cmap.Filter(arg)
			if strings.Contains(comment.String(), skipComment) {
				log.Default().Printf("%s: skipping param %v\n", fn.Name.Name, unaryExpl.X)
				break
			}

			// Get the argument.
			// If a field is simple variable, e.g. var count int,
			// then the type is ast.SelectorExpr.
			// If it's a struct member, it's a ast.SelectorExpr.
			var scanArg ScanArg
			switch expr := unaryExpl.X.(type) {
			case *ast.Ident:
				log.Default().Printf("%s: found var %q, use %q comment to exclude it from generation if needed\n", fn.Name.Name, expr.Name, skipComment)
				scanArg = ScanArg{
					Name: expr.Name,
					Path: "",
					Expr: expr,
				}
			case *ast.SelectorExpr:
				scanArg = parseScanArg(expr)
			default:
				return nil, fmt.Errorf("%s: unknown argument type: %T %+v\n", fn.Name.Name, expr, expr)
			}
			args = append(args, scanArg)

			if strings.Contains(comment.String(), prefixComment) {
				parts := strings.Split(comment.String(), prefixComment)
				if len(parts) != 2 {
					return nil, fmt.Errorf("%s: unexpected comment format: %q, should be \"%s<value>\"\n", fn.Name.Name, comment.String(), prefixComment)
				}

				prefixes[scanArg.Path] = parts[1]
			}
		}
	}

	if len(args) == 0 {
		return nil, nil
	}

	return &ParsedScanFunc{
		FuncName: fn.Name.Name,
		Args:     args,
		Prefixes: prefixes,
	}, nil
}

func parseScanArg(expr *ast.SelectorExpr) ScanArg {
	path := make([]string, 0)
	var ptr *ast.SelectorExpr = expr

	scanArg := ScanArg{
		Name: expr.Sel.Name,
		Expr: expr,
	}

	for {

		switch inner := ptr.X.(type) {
		case *ast.SelectorExpr:
			path = append(path, inner.Sel.Name)
			ptr = inner
		case *ast.Ident:
			path = append(path, inner.Name)
			slices.Reverse(path)
			scanArg.Path = strings.Join(path, ".")
			return scanArg
		default:
			log.Fatalf("unexpected expr type: %T (%+v) included in expr %v\n", ptr.X, ptr.X, expr)
		}
	}
}

func generate(buf *bytes.Buffer, parsed []ParsedScanFunc) error {
	for i, p := range parsed {
		var args string
		for _, arg := range p.Args {
			args += fmt.Sprintf("%s.%s, ", arg.Path, arg.Name)
		}
		fmt.Printf("%v) %s: %s - %+v\n\n", i, p.FuncName, args, p.Prefixes)
	}
	return nil
}
